name: Convert  to Simplified Chinese

on:
  push:
    paths:
      - "epgziyong.xml"          # 只有 epgziyong.xml 有更動才會觸發
  workflow_dispatch:             # 允許手動執行
  schedule:
    - cron: '23 */1 * * *'        # 每小時第 2 分鐘執行一次

jobs:
  convert:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          pip install opencc
          sudo apt-get update
          sudo apt-get install -y gzip
      - name: Convert and compress
        run: |
          python - <<'EOF'
          from opencc import OpenCC
          import os
          input_file = "epgziyong.xml"
          output_file = "swepg.xml"
          if not os.path.exists(input_file):
              raise FileNotFoundError(f"{input_file} 不存在")
          cc = OpenCC('t2s')
          with open(input_file, "r", encoding="utf-8") as f:
              text = f.read()
          simplified = cc.convert(text)
          with open(output_file, "w", encoding="utf-8") as f:
              f.write(simplified)
          print(f"✅ 已生成 {output_file}")
          EOF
          # 壓縮 swepg.xml 為 swepg.xml.gz
          gzip -kf swepg.xml
          echo "✅ 已壓縮為 swepg.xml.gz"
      - name: Commit and push result
        run: |
         - name: Set Git user
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"

      - name: Make changes / auto generate files
        run: |
          # 这里放你要做的变更，比如生成 swepg.xml、压缩等等
          # 假设你有一个脚本 convert-and-compress.sh
          ./scripts/convert-and-compress.sh

      - name: Commit changes (if any)
        run: |
          git add .
          if git diff --cached --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          git commit -m "Auto convert and compress: Traditional → Simplified Chinese"

      - name: Pull remote and rebase
        run: |
          # 先拉最新远端
          git fetch origin main
          # 使用 rebase 把你的提交放到远端最新之后
          git rebase origin/main
        # 如果 rebase 出错（有冲突），job 会失败，日志里你可以看到冲突文件，需要手动干预

      - name: Push changes
        run: |
          git push origin main
        # 如果你知道没有别人会跟你同时改，或者做好风险评估，也可以改为强制推：
        # git push origin main --force-with-lease

